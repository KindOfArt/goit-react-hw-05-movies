{"version":3,"file":"static/js/283.67e2398f.chunk.js","mappings":"2PAEaA,EAAgBC,EAAAA,GAAAA,IAAH,qEAIbC,EAAOD,EAAAA,GAAAA,KAAH,mFAKJE,EAAQF,EAAAA,GAAAA,MAAH,+DAILG,EAAQH,EAAAA,GAAAA,MAAH,+DAILI,EAAcJ,EAAAA,GAAAA,IAAH,sBACXK,EAASL,EAAAA,GAAAA,OAAH,oM,SCmCnB,EA1CwB,SAAC,GAAkB,IAAhBM,EAAe,EAAfA,SACzB,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA4BC,EAAAA,EAAAA,MAAnBC,GAAT,eAUA,OACE,SAACZ,EAAD,WACE,UAACE,EAAD,CAAMW,SAVW,SAAAC,GACnBA,EAAEC,iBAEFR,EAASE,GAETC,EAAe,GAChB,EAIG,WACE,UAACP,EAAD,8BAEE,SAACC,EAAD,CACEY,MAAOP,EACPQ,SAAU,SAAAH,GACR,IAAME,EAAQF,EAAEI,cAAcF,MAC9BN,EAAeM,GACfJ,EAA0B,KAAVI,EAAe,CAAEG,EAAGH,GAAU,CAAC,EAChD,EACDI,KAAK,OACLC,KAAK,SACLC,YAAY,eACZC,aAAa,YAGjB,SAAClB,EAAD,WACE,SAACC,EAAD,CAAQc,KAAK,SAAb,0BAKT,E,kBC3BD,EAdmB,SAAC,GAAiC,IAA/BI,EAA8B,EAA9BA,GAAIC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,aACzBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAAC,IAAD,WACE,UAAC,IAAD,CAAYC,GAAE,UAAKL,GAAMM,MAAO,CAAEC,KAAMJ,GAAxC,UACGF,EADH,IACWC,IAAgB,gCAAQA,EAAaM,MAAM,EAAG,GAA9B,WAIhC,E,SChBYC,EAAYhC,EAAAA,GAAAA,IAAH,sBCyBtB,EArBmB,SAAC,GAAgB,IAAdiC,EAAa,EAAbA,OACpB,OACE,SAACD,EAAD,WACE,SAAC,IAAD,UACGC,EAAOC,KAAI,gBAAGX,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,aAAd,OACV,SAAC,EAAD,CAEEF,GAAIA,EACJC,MAAOA,EACPC,aAAcA,GAHTF,EAFG,OAWnB,ECiBD,EA/Be,WACb,OAAuBb,EAAAA,EAAAA,MAAhByB,GAAP,eACA,GAAsC5B,EAAAA,EAAAA,WACpC,kCAAM4B,EAAaC,IAAI,YAAvB,QAA+B,EAA/B,IADF,eAAO5B,EAAP,KAAoBC,EAApB,KAGA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAO0B,EAAP,KAAeI,EAAf,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACH9B,IAIL+B,EAAAA,EAAAA,IAAa/B,GACVgC,MAAK,qBAAGC,QACCP,KAAI,kBAAkC,CAC5CX,GADU,EAAGA,GAEbC,MAFU,EAAOA,MAGjBC,aAHU,EAAcA,aAAd,GADR,IAOLe,KAAKH,EACT,GAAE,CAAC7B,KAGF,iCACE,SAAC,EAAD,CAAiBF,SAAUG,IAC1BwB,EAAOS,OAAS,GAAI,SAAC,EAAD,CAAYT,OAAQA,IAAa,OAG3D,C","sources":["components/MovieSearchForm/MovieSearchForm.styled.js","components/MovieSearchForm/MovieSearchForm.jsx","components/MoviesItem/MoviesItem.jsx","components/MoviesList/MovieList.styled.js","components/MoviesList/MoviesList.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const FormContainer = styled.div`\n  padding-top: 20px;\n  padding-left: 30px;\n`;\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\nexport const Label = styled.label`\n  display: block;\n  font-size: 24px;\n`;\nexport const Input = styled.input`\n  display: block;\n  margin-top: 5px;\n`;\nexport const ButtonThumb = styled.div``;\nexport const Button = styled.button`\n  padding: 4px 5px;\n  margin: 0;\n  border: 1px solid black;\n  background-color: inherit;\n  border-radius: 20px;\n  font-size: 18px;\n  &:hover {\n    scale: 1.1;\n  }\n`;\n","import PropTypes from 'prop-types';\n\nimport { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport {\n  Button,\n  ButtonThumb,\n  Form,\n  FormContainer,\n  Input,\n  Label,\n} from './MovieSearchForm.styled';\n\nconst MovieSearchForm = ({ getQuery }) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [, setSearchParams] = useSearchParams();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    getQuery(searchQuery);\n\n    setSearchQuery('');\n  };\n\n  return (\n    <FormContainer>\n      <Form onSubmit={handleSubmit}>\n        <Label>\n          Search a movie:\n          <Input\n            value={searchQuery}\n            onChange={e => {\n              const value = e.currentTarget.value;\n              setSearchQuery(value);\n              setSearchParams(value !== '' ? { q: value } : {});\n            }}\n            type=\"text\"\n            name=\"movies\"\n            placeholder=\"search query\"\n            autoComplete=\"off\"\n          />\n        </Label>\n        <ButtonThumb>\n          <Button type=\"submit\">Search</Button>\n        </ButtonThumb>\n      </Form>\n    </FormContainer>\n  );\n};\n\nMovieSearchForm.propTypes = {\n  getQuery: PropTypes.func.isRequired,\n};\n\nexport default MovieSearchForm;\n","import {\n  ListItem,\n  StyledLink,\n} from 'components/TrendingItem/TrendingItem.styled';\nimport { useLocation } from 'react-router-dom';\n\n// import PropTypes from 'prop-types';\n\nconst MoviesItem = ({ id, title, release_date }) => {\n  const location = useLocation();\n\n  return (\n    <ListItem>\n      <StyledLink to={`${id}`} state={{ from: location }}>\n        {title} {release_date && <span>({release_date.slice(0, 4)})</span>}\n      </StyledLink>\n    </ListItem>\n  );\n};\n\nMoviesItem.propTypes = {};\n\nexport default MoviesItem;\n","import styled from 'styled-components';\n\nexport const ListThumb = styled.div``;\n","import MoviesItem from 'components/MoviesItem/MoviesItem';\nimport { List } from 'components/TrendingList/TrandingList.styled';\nimport { ListThumb } from './MovieList.styled';\n\nimport PropTypes from 'prop-types';\n\nconst MoviesList = ({ movies }) => {\n  return (\n    <ListThumb>\n      <List>\n        {movies.map(({ id, title, release_date }) => (\n          <MoviesItem\n            key={id}\n            id={id}\n            title={title}\n            release_date={release_date}\n          />\n        ))}\n      </List>\n    </ListThumb>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.array.isRequired,\n};\n\nexport default MoviesList;\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { searchMovies } from 'API/moviesdbAPI';\nimport MovieSearchForm from 'components/MovieSearchForm/MovieSearchForm';\nimport MoviesList from 'components/MoviesList/MoviesList';\n\nconst Movies = () => {\n  const [searchParams] = useSearchParams();\n  const [searchQuery, setSearchQuery] = useState(\n    () => searchParams.get('q') ?? ''\n  );\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    if (!searchQuery) {\n      return;\n    }\n\n    searchMovies(searchQuery)\n      .then(({ results }) =>\n        results.map(({ id, title, release_date }) => ({\n          id,\n          title,\n          release_date,\n        }))\n      )\n      .then(setMovies);\n  }, [searchQuery]);\n\n  return (\n    <>\n      <MovieSearchForm getQuery={setSearchQuery} />\n      {movies.length > 0 ? <MoviesList movies={movies} /> : null}\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["FormContainer","styled","Form","Label","Input","ButtonThumb","Button","getQuery","useState","searchQuery","setSearchQuery","useSearchParams","setSearchParams","onSubmit","e","preventDefault","value","onChange","currentTarget","q","type","name","placeholder","autoComplete","id","title","release_date","location","useLocation","to","state","from","slice","ListThumb","movies","map","searchParams","get","setMovies","useEffect","searchMovies","then","results","length"],"sourceRoot":""}