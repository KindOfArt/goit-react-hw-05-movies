{"version":3,"file":"static/js/233.5be2e900.chunk.js","mappings":"oOA6CA,EAxCwB,SAAC,GAAkB,IAAhBA,EAAe,EAAfA,SACzB,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA4BC,EAAAA,EAAAA,MAAnBC,GAAT,eAUA,OACE,0BACE,kBAAMC,SAVW,SAAAC,GACnBA,EAAEC,iBAEFR,EAASE,GAETC,EAAe,GAChB,EAIG,WACE,gDAEE,kBACEM,MAAOP,EACPQ,SAAU,SAAAH,GACR,IAAME,EAAQF,EAAEI,cAAcF,MAC9BN,EAAeM,GACfJ,EAA0B,KAAVI,EAAe,CAAEG,EAAGH,GAAU,CAAC,EAChD,EACDI,KAAK,OACLC,KAAK,SACLC,YAAY,eACZC,aAAa,YAGjB,0BACE,mBAAQH,KAAK,SAAb,0BAKT,E,SCpBD,EAjBmB,SAAC,GAAiC,IAA/BI,EAA8B,EAA9BA,GAAIC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,aACzBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,yBACE,0BACE,UAAC,KAAD,CAASC,GAAE,UAAKL,GAAMM,MAAO,CAAEC,KAAMJ,GAArC,UACGF,EACAC,IAAgB,gCAAQA,EAAaM,MAAM,EAAG,GAA9B,aAK1B,ECMD,EAnBmB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACpB,OACE,0BACE,wBACGA,EAAOC,KAAI,gBAAGV,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,aAAd,OACV,SAAC,EAAD,CAEEF,GAAIA,EACJC,MAAOA,EACPC,aAAcA,GAHTF,EAFG,OAWnB,ECmBD,EA/Be,WACb,OAAuBb,EAAAA,EAAAA,MAAhBwB,GAAP,eACA,GAAsC3B,EAAAA,EAAAA,WACpC,kCAAM2B,EAAaC,IAAI,YAAvB,QAA+B,EAA/B,IADF,eAAO3B,EAAP,KAAoBC,EAApB,KAGA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOyB,EAAP,KAAeI,EAAf,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACH7B,IAIL8B,EAAAA,EAAAA,IAAa9B,GACV+B,MAAK,qBAAGC,QACCP,KAAI,kBAAkC,CAC5CV,GADU,EAAGA,GAEbC,MAFU,EAAOA,MAGjBC,aAHU,EAAcA,aAAd,GADR,IAOLc,KAAKH,EACT,GAAE,CAAC5B,KAGF,iCACE,SAAC,EAAD,CAAiBF,SAAUG,IAC1BuB,EAAOS,OAAS,GAAI,SAAC,EAAD,CAAYT,OAAQA,IAAa,OAG3D,C","sources":["components/MovieSearchForm/MovieSearchForm.jsx","components/MoviesItem/MoviesItem.jsx","components/MoviesList/MoviesList.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["// import PropTypes from 'prop-types';\n\nimport { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nconst MovieSearchForm = ({ getQuery }) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [, setSearchParams] = useSearchParams();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    getQuery(searchQuery);\n\n    setSearchQuery('');\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <label>\n          Search a movie:\n          <input\n            value={searchQuery}\n            onChange={e => {\n              const value = e.currentTarget.value;\n              setSearchQuery(value);\n              setSearchParams(value !== '' ? { q: value } : {});\n            }}\n            type=\"text\"\n            name=\"movies\"\n            placeholder=\"search query\"\n            autoComplete=\"off\"\n          />\n        </label>\n        <div>\n          <button type=\"submit\">Search</button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nMovieSearchForm.propTypes = {};\n\nexport default MovieSearchForm;\n","import { NavLink, useLocation } from 'react-router-dom';\n\n// import PropTypes from 'prop-types';\n\nconst MoviesItem = ({ id, title, release_date }) => {\n  const location = useLocation();\n\n  return (\n    <li>\n      <div>\n        <NavLink to={`${id}`} state={{ from: location }}>\n          {title}\n          {release_date && <span>({release_date.slice(0, 4)})</span>}\n        </NavLink>\n      </div>\n    </li>\n  );\n};\n\nMoviesItem.propTypes = {};\n\nexport default MoviesItem;\n","import MoviesItem from 'components/MoviesItem/MoviesItem';\n\n// import PropTypes from 'prop-types';\n\nconst MoviesList = ({ movies }) => {\n  return (\n    <div>\n      <ul>\n        {movies.map(({ id, title, release_date }) => (\n          <MoviesItem\n            key={id}\n            id={id}\n            title={title}\n            release_date={release_date}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nMoviesList.propTypes = {};\n\nexport default MoviesList;\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { searchMovies } from 'API/moviesdbAPI';\nimport MovieSearchForm from 'components/MovieSearchForm/MovieSearchForm';\nimport MoviesList from 'components/MoviesList/MoviesList';\n\nconst Movies = () => {\n  const [searchParams] = useSearchParams();\n  const [searchQuery, setSearchQuery] = useState(\n    () => searchParams.get('q') ?? ''\n  );\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    if (!searchQuery) {\n      return;\n    }\n\n    searchMovies(searchQuery)\n      .then(({ results }) =>\n        results.map(({ id, title, release_date }) => ({\n          id,\n          title,\n          release_date,\n        }))\n      )\n      .then(setMovies);\n  }, [searchQuery]);\n\n  return (\n    <>\n      <MovieSearchForm getQuery={setSearchQuery} />\n      {movies.length > 0 ? <MoviesList movies={movies} /> : null}\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["getQuery","useState","searchQuery","setSearchQuery","useSearchParams","setSearchParams","onSubmit","e","preventDefault","value","onChange","currentTarget","q","type","name","placeholder","autoComplete","id","title","release_date","location","useLocation","to","state","from","slice","movies","map","searchParams","get","setMovies","useEffect","searchMovies","then","results","length"],"sourceRoot":""}